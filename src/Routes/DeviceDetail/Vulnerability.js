import React, { useContext, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { RegistryContext } from '../../store';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { Alert, Button } from '@patternfly/react-core';
import PropTypes from 'prop-types';
import { InProgressIcon } from '@patternfly/react-icons';
import UpdateImageModal from './UpdateImageModal';
import { getImageSet } from '../../api/images';

const getActiveAlert = (
  CVEs,
  deviceData,
  newImageStatus,
  imageId,
  prevState
) => {
  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {
    return prevState;
  }
  if (!CVEs?.data?.length > 0 || !imageId) {
    return 'noAlert';
  }
  if (
    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||
    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'
  ) {
    return 'systemUpdating';
  }
  if (deviceData?.Device?.UpdateAvailable) {
    return 'updateDevice';
  }
  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {
    return 'imageBuilding';
  }
  return 'updateImage';
};

const VulnerabilityTab = ({
  deviceData,
  setUpdateModal,
  imageId,
  setReload,
}) => {
  const { deviceId } = useParams();
  const { getRegistry } = useContext(RegistryContext);
  const [updateCveModal, setUpdateCveModal] = useState({
    isOpen: false,
    imageId: null,
    cveCount: 0,
  });
  const [CVEs, setCVEs] = useState(null);
  const [newImageStatus, setNewImageStatus] = useState(null);
  const [activeAlert, setActiveAlert] = useState('noAlert');

  useEffect(() => {
    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));
  }, [imageId]);

  useEffect(() => {
    (async () => {
      if (!deviceData) {
        return;
      }
      // Use view API to get current image set status
      const params = {
        id: 'view',
        q: { id: deviceData?.ImageInfo?.Image?.ImageSetID },
      };
      const resp = await getImageSet(params);
      setNewImageStatus(resp?.data?.[0]?.Status);
    })();
  }, [deviceData]);

  useEffect(() => {
    !CVEs?.isLoading &&
      !CVEs?.meta?.filter &&
      setUpdateCveModal((prevState) => ({
        ...prevState,
        cveCount: CVEs?.data?.length,
      }));

    setActiveAlert((prevState) =>
      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)
    );
  }, [CVEs, deviceData, newImageStatus, imageId]);

  const handleUpdateImageButton = () => {
    setUpdateCveModal((preState) => ({
      ...preState,
      isOpen: true,
    }));
  };

  const handleUpdateDeviceButton = () => {
    setUpdateModal((preState) => ({
      ...preState,
      isOpen: true,
    }));
  };

  const alerts = {
    updateImage: (
      <Alert
        className="pf-u-mb-md"
        variant="info"
        isInline
        title="To remediate CVEs, update the image."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            size="sm"
            onClick={handleUpdateImageButton}
          >
            Update Image
          </Button>
        }
      />
    ),
    imageBuilding: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="Image build in progress. Once completed, you'll need to update your system."
      />
    ),
    updateDevice: (
      <Alert
        className="pf-u-mb-md"
        variant="warning"
        isInline
        title=" Image build completed. Update system to the newest image version to remediate CVEs."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            size="sm"
            onClick={handleUpdateDeviceButton}
          >
            Update system
          </Button>
        }
      />
    ),
    systemUpdating: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="System updating. No additional actions required."
      />
    ),
    noAlert: <></>,
  };

  return (
    <>
      <section className="add-100vh pf-l-page__main-section pf-c-page__main-section">
        {alerts[activeAlert]}
        <AsyncComponent
          appName="vulnerability"
          module="./SystemDetail"
          getRegistry={getRegistry}
          customIntlProvider
          entity={{ id: deviceId }}
          canSelect={false}
          canEditPairStatus={false}
          canManageColumns={false}
          linkToCustomerPortal
          defaultColumns={['synopsis', 'public_date', 'impact', 'cvss_score']}
          filters={[
            'filter',
            'security_rule',
            'known_exploit',
            'impact',
            'cvss_score',
          ]}
          customAction={(cve) => {
            setCVEs(cve);
          }}
        />
      </section>
      {updateCveModal.isOpen && (
        <UpdateImageModal
          updateCveModal={updateCveModal}
          setUpdateCveModal={setUpdateCveModal}
          setReload={setReload}
        />
      )}
    </>
  );
};

VulnerabilityTab.propTypes = {
  imageId: PropTypes.number,
  deviceData: PropTypes.object,
  setUpdateModal: PropTypes.func,
  setReload: PropTypes.func,
};

export default VulnerabilityTab;
